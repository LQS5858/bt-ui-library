const Components = require('../../component.json')

const fs = require('fs')

const render = require('json-templater/string')

const uppercamelcase = require('uppercamelcase')

const path = require('path')

const endOfLine = require('os').EOL

const OUTPUT_PATH = path.join(__dirname, '../../src/index.js')

const IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';'
const INSTALL_COMPONENT_TEMPLATE = '{{name}}'
const MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from 'bt-ui/src/locale';

const components = [
{{install}}
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  

  Vue.prototype.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
{{list}}
};`

delete Components.font

const ComponentNames = Object.keys(Components)
const installTemplate = []
const includeComponentTemplate = []
const listTemplate = []

ComponentNames.forEach(name => {
  const componentName = uppercamelcase(name)
  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }))
  if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName
    }))
  }
  if (componentName !== 'Loading') listTemplate.push(`${componentName}`)
})

const template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
})
try {
  fs.writeFileSync(OUTPUT_PATH, template)
  console.log('[build entry] DONE:', OUTPUT_PATH)
} catch (error) {
  console.log('[build entry] FAIL:')
}
